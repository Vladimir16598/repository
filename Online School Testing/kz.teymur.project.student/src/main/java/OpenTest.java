import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

/**
 * Created by iww on 27.01.2015.
 */
public class OpenTest {

    private JPanel panel;

    private JPanel topPanel;

    private JLabel nameLabel;
    private JLabel timeLabel;

    private JButton nextQuestionButton;
    private JButton previousQuestionButton;
    private JButton doneTestButton;

    private ArrayList<JPanel> questions = new ArrayList<>();
    private ArrayList<String> keys = new ArrayList<>();
    private ArrayList<String> answers = new ArrayList<>();

    private Font font;

    private int n = 0;

    private eHandler handler = new eHandler();

    private String nameTest;

    private Timer timer;
    private int time;

    private int correct = 0;
    private int incorrect = 0;
    private int percentage;
    private int mark;

    private int point3;
    private int point4;
    private int point5;

    private int idTest;

    private String lesson;

    private JPanel currentQuestion;

    OpenTest(int idTest, String nameTest, int time, int point3, int point4, int point5, String lesson){

        font = new Font("Verdana", Font.PLAIN, 15);

        this.nameTest = nameTest;
        this.idTest = idTest;

        this.time = time * 60;

        this.point3 = point3;
        this.point4 = point4;
        this.point5 = point5;
        this.lesson = lesson;

        panel = new JPanel();

        nameLabel = new JLabel(nameTest, SwingConstants.CENTER);
        nameLabel.setFont(font);

        timeLabel = new JLabel(Integer.toString(time), SwingConstants.CENTER);
        timeLabel.setFont(font);

        timer = new Timer(1000,new TimerTick());

        nextQuestionButton = new JButton();
        nextQuestionButton.setFont(font);
        nextQuestionButton.setFocusable(false);
        nextQuestionButton.addActionListener(handler);

        previousQuestionButton = new JButton();
        previousQuestionButton.setFont(font);
        previousQuestionButton.setFocusable(false);
        previousQuestionButton.addActionListener(handler);

        doneTestButton = new JButton();
        doneTestButton.setFont(font);
        doneTestButton.setFocusable(false);
        doneTestButton.addActionListener(handler);

        getText();

        topPanel = new JPanel();
        topPanel.setBorder(BorderFactory.createEtchedBorder());
        topPanel.setLayout(new GridBagLayout());

        topPanel.add(nameLabel, new GridBagConstraints(0, 0, 3, 1, 1, 1,
                GridBagConstraints.NORTH, GridBagConstraints.HORIZONTAL,
                new Insets(2, 2, 2, 2), 0, 0));

        topPanel.add(previousQuestionButton, new GridBagConstraints(0, 1, 1, 1, 1, 1,
                GridBagConstraints.NORTH, GridBagConstraints.HORIZONTAL,
                new Insets(2, 2, 2, 2), 0, 0));

        topPanel.add(timeLabel, new GridBagConstraints(1, 1, 1, 1, 1, 1,
                GridBagConstraints.NORTH, GridBagConstraints.HORIZONTAL,
                new Insets(2, 2, 2, 2), 0, 0));

        topPanel.add(nextQuestionButton, new GridBagConstraints(2, 1, 1, 1, 1, 1,
                GridBagConstraints.NORTH, GridBagConstraints.HORIZONTAL,
                new Insets(2, 2, 2, 2), 0, 0));

        panel.setLayout(new BorderLayout());
        panel.add(topPanel, BorderLayout.NORTH);
        panel.add(doneTestButton, BorderLayout.SOUTH);

        Database.getQuestions(idTest, this);
        panel.add(questions.get(0), BorderLayout.CENTER);
        currentQuestion = questions.get(0);
        timer.start();
    }

    public class eHandler implements ActionListener{

        @Override
        public void actionPerformed(ActionEvent e) {


            if (e.getSource() == nextQuestionButton){
                if (n < questions.size() - 1){
                    panel.remove(currentQuestion);
                    n++;
                    currentQuestion = questions.get(n);
                    panel.add(currentQuestion, BorderLayout.CENTER);
                    panel.repaint();
                    panel.revalidate();
                }
            }

            if (e.getSource() == previousQuestionButton){
                if (n > 0){
                    panel.remove(currentQuestion);
                    n--;
                    currentQuestion = questions.get(n);
                    panel.add(currentQuestion, BorderLayout.CENTER);
                    panel.repaint();
                    panel.revalidate();
                }
            }

            if (e.getSource() == doneTestButton){
                endTest();
            }
        }
    }

    class TimerTick implements ActionListener{

        @Override
        public void actionPerformed(ActionEvent e) {
            time--;
            timeLabel.setText(time + " seconds left");
            if(time == 0){
                timer.stop();
                endTest();
            }
        }
    }

    public void endTest(){
        timer.stop();
        for (JPanel jp : questions) {
            JRadioButton jrb1 = (JRadioButton) jp.getComponent(1);
            JRadioButton jrb2 = (JRadioButton) jp.getComponent(2);
            JRadioButton jrb3 = (JRadioButton) jp.getComponent(3);
            JRadioButton jrb4 = (JRadioButton) jp.getComponent(4);
            JRadioButton jrb5 = (JRadioButton) jp.getComponent(5);

            if (jrb1.isSelected()) {
                answers.add("A");
            } else if (jrb2.isSelected()) {
                answers.add("B");
            } else if (jrb3.isSelected()) {
                answers.add("C");
            } else if (jrb4.isSelected()) {
                answers.add("D");
            } else if (jrb5.isSelected()) {
                answers.add("E");
            } else {
                answers.add("O");
            }

        }

        for (int i = 0; i < keys.size(); i++){
            if (keys.get(i).equals(answers.get(i))){
                correct++;
            } else incorrect++;
        }

        percentage = correct*100/(correct + incorrect);

        if (percentage < point3){
            mark = 2;
        }
        if (percentage >= point3){
            mark = 3;
        }
        if (percentage >= point4){
            mark = 4;
        }
        if (percentage >= point5){
            mark = 5;
        }

        Database.addResult(idTest, nameTest, Database.getIdUser(), Database.getName(), Database.getSurname(), correct, incorrect,
                percentage, mark, lesson);
        questions.removeAll(questions);
        keys.removeAll(keys);
        answers.removeAll(answers);
        try {
            this.finalize();
        } catch (Throwable throwable) {
            throwable.printStackTrace();
        }
    }

    public void addQuestion(JPanel panel, String key){
        questions.add(panel);
        keys.add(key);
    }

    public JPanel getPanel(){
        return panel;
    }

    public void getText(){
        nextQuestionButton.setText(MainMenu.globalLanguage.getNEXT_QUESTION());
        previousQuestionButton.setText(MainMenu.globalLanguage.getPREV_QUESTION());
        doneTestButton.setText(MainMenu.globalLanguage.getDONE_TEST());
    }
}
